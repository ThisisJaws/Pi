# Makefile.in generated by automake 1.7.2 from Makefile.am.
# examples/wxPlayer/Makefile.  Generated from Makefile.in by configure.

# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002
# Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



srcdir = .
top_srcdir = ../..

pkgdatadir = $(datadir)/audiere
pkglibdir = $(libdir)/audiere
pkgincludedir = $(includedir)/audiere
top_builddir = ../..

am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = armv7l-unknown-linux-gnu
host_triplet = armv7l-unknown-linux-gnu
target_triplet = armv7l-unknown-linux-gnu
ACLOCAL = ${SHELL} /home/pi/git-repos/Pi/audiere-1.9.3/config/missing --run aclocal-1.7
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /home/pi/git-repos/Pi/audiere-1.9.3/config/missing --run tar
AUTOCONF = ${SHELL} /home/pi/git-repos/Pi/audiere-1.9.3/config/missing --run autoconf
AUTOHEADER = ${SHELL} /home/pi/git-repos/Pi/audiere-1.9.3/config/missing --run autoheader
AUTOMAKE = ${SHELL} /home/pi/git-repos/Pi/audiere-1.9.3/config/missing --run automake-1.7
AWK = mawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2 -Wall -Wno-non-virtual-dtor
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2 -Wall -Wno-non-virtual-dtor
CYGPATH_W = echo
DEFS = -DPACKAGE_NAME=\"\" -DPACKAGE_TARNAME=\"\" -DPACKAGE_VERSION=\"\" -DPACKAGE_STRING=\"\" -DPACKAGE_BUGREPORT=\"\" -DPACKAGE=\"audiere\" -DVERSION=\"1.9.3\" -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_DLFCN_H=1 -DNO_FLAC=1 -DNO_DUMB=1 -DHAVE_CLOCK_GETTIME=1 -DSTDC_HEADERS=1 -DHAVE_OSS=1 -DNO_OGG=1 
DEPDIR = .deps
ECHO = echo
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = grep -E
EXEEXT = 
EXTRA_LIBS = -lpthread 
HAVE_AL_FALSE = 
HAVE_AL_TRUE = #
HAVE_DSOUND_FALSE = 
HAVE_DSOUND_TRUE = #
HAVE_DUMB_FALSE = 
HAVE_DUMB_TRUE = #
HAVE_FLAC_FALSE = 
HAVE_FLAC_TRUE = #
HAVE_OGG_FALSE = 
HAVE_OGG_TRUE = #
HAVE_OSS_FALSE = #
HAVE_OSS_TRUE = 
HAVE_WINMM_FALSE = 
HAVE_WINMM_TRUE = #
HAVE_WXWINDOWS_FALSE = 
HAVE_WXWINDOWS_TRUE = #
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS = -lpthread 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/pi/git-repos/Pi/audiere-1.9.3/config/missing --run makeinfo
OBJEXT = o
PACKAGE = audiere
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/bash
STRIP = strip
VERSION = 1.9.3
WORDS_BIGENDIAN = 
WX_CONFIG = no
WX_CPPFLAGS = 
WX_LIBS = 
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_RANLIB = ranlib
ac_ct_STRIP = strip
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__quote = 
bindir = ${exec_prefix}/bin
build = armv7l-unknown-linux-gnu
build_alias = 
build_cpu = armv7l
build_os = linux-gnu
build_vendor = unknown
datadir = ${prefix}/share
exec_prefix = ${prefix}
host = armv7l-unknown-linux-gnu
host_alias = 
host_cpu = armv7l
host_os = linux-gnu
host_vendor = unknown
includedir = ${prefix}/include
infodir = ${prefix}/info
install_sh = /home/pi/git-repos/Pi/audiere-1.9.3/config/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localstatedir = ${prefix}/var
mandir = ${prefix}/man
oldincludedir = /usr/include
prefix = /usr/local
program_transform_name = s,x,x,
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target = armv7l-unknown-linux-gnu
target_alias = 
target_cpu = armv7l
target_os = linux-gnu
target_vendor = unknown
INCLUDES = -I $(top_srcdir)/src

SRC = \
	Commands.h \
	DeviceFrame.cpp \
	DeviceFrame.h \
	EditLoopPointsDialog.cpp \
	EditLoopPointsDialog.h \
	NewDeviceDialog.cpp \
	NewDeviceDialog.h \
	SoundEffectFrame.cpp \
	SoundEffectFrame.h \
	StreamFrame.cpp \
	StreamFrame.h \
	resource.h \
	wx.h \
	wxPlayer.cpp \
	wxPlayer.h


#bin_PROGRAMS = wxPlayer
#wxPlayer_LDADD = $(top_builddir)/src/libaudiere.la
#wxPlayer_CXXFLAGS = 
#wxPlayer_LDFLAGS = 

#wxPlayer_SOURCES = $(SRC)

EXTRA_DIST = $(SRC)
subdir = examples/wxPlayer
mkinstalldirs = $(SHELL) $(top_srcdir)/config/mkinstalldirs
CONFIG_CLEAN_FILES =
#bin_PROGRAMS = wxPlayer$(EXEEXT)
bin_PROGRAMS =
PROGRAMS = $(bin_PROGRAMS)

am__wxPlayer_SOURCES_DIST = Commands.h DeviceFrame.cpp DeviceFrame.h \
	EditLoopPointsDialog.cpp EditLoopPointsDialog.h \
	NewDeviceDialog.cpp NewDeviceDialog.h SoundEffectFrame.cpp \
	SoundEffectFrame.h StreamFrame.cpp StreamFrame.h resource.h \
	wx.h wxPlayer.cpp wxPlayer.h
am__objects_1 = wxPlayer-DeviceFrame.$(OBJEXT) \
	wxPlayer-EditLoopPointsDialog.$(OBJEXT) \
	wxPlayer-NewDeviceDialog.$(OBJEXT) \
	wxPlayer-SoundEffectFrame.$(OBJEXT) \
	wxPlayer-StreamFrame.$(OBJEXT) wxPlayer-wxPlayer.$(OBJEXT)
#am_wxPlayer_OBJECTS = $(am__objects_1)
wxPlayer_OBJECTS = $(am_wxPlayer_OBJECTS)
#wxPlayer_DEPENDENCIES = \
#	$(top_builddir)/src/libaudiere.la
wxPlayer_DEPENDENCIES =

DEFAULT_INCLUDES =  -I. -I$(srcdir)
depcomp = $(SHELL) $(top_srcdir)/config/depcomp
am__depfiles_maybe = depfiles
DEP_FILES = ./$(DEPDIR)/wxPlayer-DeviceFrame.Po \
	./$(DEPDIR)/wxPlayer-EditLoopPointsDialog.Po \
	./$(DEPDIR)/wxPlayer-NewDeviceDialog.Po \
	./$(DEPDIR)/wxPlayer-SoundEffectFrame.Po \
	./$(DEPDIR)/wxPlayer-StreamFrame.Po \
	./$(DEPDIR)/wxPlayer-wxPlayer.Po
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) --mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) \
	$(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
DIST_SOURCES = $(am__wxPlayer_SOURCES_DIST)
DIST_COMMON = Makefile.am Makefile.in
SOURCES = $(wxPlayer_SOURCES)

all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .lo .o .obj
$(srcdir)/Makefile.in:  Makefile.am  $(top_srcdir)/configure.in $(ACLOCAL_M4)
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  examples/wxPlayer/Makefile
Makefile:  $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(bindir)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	     || test -f $$p1 \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(binPROGRAMS_INSTALL) $$p $(DESTDIR)$(bindir)/$$f"; \
	   $(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(binPROGRAMS_INSTALL) $$p $(DESTDIR)$(bindir)/$$f || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f $(DESTDIR)$(bindir)/$$f"; \
	  rm -f $(DESTDIR)$(bindir)/$$f; \
	done

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
wxPlayer$(EXEEXT): $(wxPlayer_OBJECTS) $(wxPlayer_DEPENDENCIES) 
	@rm -f wxPlayer$(EXEEXT)
	$(CXXLINK) $(wxPlayer_LDFLAGS) $(wxPlayer_OBJECTS) $(wxPlayer_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT) core *.core

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/wxPlayer-DeviceFrame.Po
include ./$(DEPDIR)/wxPlayer-EditLoopPointsDialog.Po
include ./$(DEPDIR)/wxPlayer-NewDeviceDialog.Po
include ./$(DEPDIR)/wxPlayer-SoundEffectFrame.Po
include ./$(DEPDIR)/wxPlayer-StreamFrame.Po
include ./$(DEPDIR)/wxPlayer-wxPlayer.Po

distclean-depend:
	-rm -rf ./$(DEPDIR)

.cpp.o:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<; \
	then mv "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<

.cpp.obj:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`; \
	then mv "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`

.cpp.lo:
	if $(LTCXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<; \
	then mv "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Plo"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=yes \
#	depfile='$(DEPDIR)/$*.Plo' tmpdepfile='$(DEPDIR)/$*.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LTCXXCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<

wxPlayer-DeviceFrame.o: DeviceFrame.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -MT wxPlayer-DeviceFrame.o -MD -MP -MF "$(DEPDIR)/wxPlayer-DeviceFrame.Tpo" \
	  -c -o wxPlayer-DeviceFrame.o `test -f 'DeviceFrame.cpp' || echo '$(srcdir)/'`DeviceFrame.cpp; \
	then mv "$(DEPDIR)/wxPlayer-DeviceFrame.Tpo" "$(DEPDIR)/wxPlayer-DeviceFrame.Po"; \
	else rm -f "$(DEPDIR)/wxPlayer-DeviceFrame.Tpo"; exit 1; \
	fi
#	source='DeviceFrame.cpp' object='wxPlayer-DeviceFrame.o' libtool=no \
#	depfile='$(DEPDIR)/wxPlayer-DeviceFrame.Po' tmpdepfile='$(DEPDIR)/wxPlayer-DeviceFrame.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -c -o wxPlayer-DeviceFrame.o `test -f 'DeviceFrame.cpp' || echo '$(srcdir)/'`DeviceFrame.cpp

wxPlayer-DeviceFrame.obj: DeviceFrame.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -MT wxPlayer-DeviceFrame.obj -MD -MP -MF "$(DEPDIR)/wxPlayer-DeviceFrame.Tpo" \
	  -c -o wxPlayer-DeviceFrame.obj `if test -f 'DeviceFrame.cpp'; then $(CYGPATH_W) 'DeviceFrame.cpp'; else $(CYGPATH_W) '$(srcdir)/DeviceFrame.cpp'; fi`; \
	then mv "$(DEPDIR)/wxPlayer-DeviceFrame.Tpo" "$(DEPDIR)/wxPlayer-DeviceFrame.Po"; \
	else rm -f "$(DEPDIR)/wxPlayer-DeviceFrame.Tpo"; exit 1; \
	fi
#	source='DeviceFrame.cpp' object='wxPlayer-DeviceFrame.obj' libtool=no \
#	depfile='$(DEPDIR)/wxPlayer-DeviceFrame.Po' tmpdepfile='$(DEPDIR)/wxPlayer-DeviceFrame.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -c -o wxPlayer-DeviceFrame.obj `if test -f 'DeviceFrame.cpp'; then $(CYGPATH_W) 'DeviceFrame.cpp'; else $(CYGPATH_W) '$(srcdir)/DeviceFrame.cpp'; fi`

wxPlayer-DeviceFrame.lo: DeviceFrame.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -MT wxPlayer-DeviceFrame.lo -MD -MP -MF "$(DEPDIR)/wxPlayer-DeviceFrame.Tpo" \
	  -c -o wxPlayer-DeviceFrame.lo `test -f 'DeviceFrame.cpp' || echo '$(srcdir)/'`DeviceFrame.cpp; \
	then mv "$(DEPDIR)/wxPlayer-DeviceFrame.Tpo" "$(DEPDIR)/wxPlayer-DeviceFrame.Plo"; \
	else rm -f "$(DEPDIR)/wxPlayer-DeviceFrame.Tpo"; exit 1; \
	fi
#	source='DeviceFrame.cpp' object='wxPlayer-DeviceFrame.lo' libtool=yes \
#	depfile='$(DEPDIR)/wxPlayer-DeviceFrame.Plo' tmpdepfile='$(DEPDIR)/wxPlayer-DeviceFrame.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -c -o wxPlayer-DeviceFrame.lo `test -f 'DeviceFrame.cpp' || echo '$(srcdir)/'`DeviceFrame.cpp

wxPlayer-EditLoopPointsDialog.o: EditLoopPointsDialog.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -MT wxPlayer-EditLoopPointsDialog.o -MD -MP -MF "$(DEPDIR)/wxPlayer-EditLoopPointsDialog.Tpo" \
	  -c -o wxPlayer-EditLoopPointsDialog.o `test -f 'EditLoopPointsDialog.cpp' || echo '$(srcdir)/'`EditLoopPointsDialog.cpp; \
	then mv "$(DEPDIR)/wxPlayer-EditLoopPointsDialog.Tpo" "$(DEPDIR)/wxPlayer-EditLoopPointsDialog.Po"; \
	else rm -f "$(DEPDIR)/wxPlayer-EditLoopPointsDialog.Tpo"; exit 1; \
	fi
#	source='EditLoopPointsDialog.cpp' object='wxPlayer-EditLoopPointsDialog.o' libtool=no \
#	depfile='$(DEPDIR)/wxPlayer-EditLoopPointsDialog.Po' tmpdepfile='$(DEPDIR)/wxPlayer-EditLoopPointsDialog.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -c -o wxPlayer-EditLoopPointsDialog.o `test -f 'EditLoopPointsDialog.cpp' || echo '$(srcdir)/'`EditLoopPointsDialog.cpp

wxPlayer-EditLoopPointsDialog.obj: EditLoopPointsDialog.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -MT wxPlayer-EditLoopPointsDialog.obj -MD -MP -MF "$(DEPDIR)/wxPlayer-EditLoopPointsDialog.Tpo" \
	  -c -o wxPlayer-EditLoopPointsDialog.obj `if test -f 'EditLoopPointsDialog.cpp'; then $(CYGPATH_W) 'EditLoopPointsDialog.cpp'; else $(CYGPATH_W) '$(srcdir)/EditLoopPointsDialog.cpp'; fi`; \
	then mv "$(DEPDIR)/wxPlayer-EditLoopPointsDialog.Tpo" "$(DEPDIR)/wxPlayer-EditLoopPointsDialog.Po"; \
	else rm -f "$(DEPDIR)/wxPlayer-EditLoopPointsDialog.Tpo"; exit 1; \
	fi
#	source='EditLoopPointsDialog.cpp' object='wxPlayer-EditLoopPointsDialog.obj' libtool=no \
#	depfile='$(DEPDIR)/wxPlayer-EditLoopPointsDialog.Po' tmpdepfile='$(DEPDIR)/wxPlayer-EditLoopPointsDialog.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -c -o wxPlayer-EditLoopPointsDialog.obj `if test -f 'EditLoopPointsDialog.cpp'; then $(CYGPATH_W) 'EditLoopPointsDialog.cpp'; else $(CYGPATH_W) '$(srcdir)/EditLoopPointsDialog.cpp'; fi`

wxPlayer-EditLoopPointsDialog.lo: EditLoopPointsDialog.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -MT wxPlayer-EditLoopPointsDialog.lo -MD -MP -MF "$(DEPDIR)/wxPlayer-EditLoopPointsDialog.Tpo" \
	  -c -o wxPlayer-EditLoopPointsDialog.lo `test -f 'EditLoopPointsDialog.cpp' || echo '$(srcdir)/'`EditLoopPointsDialog.cpp; \
	then mv "$(DEPDIR)/wxPlayer-EditLoopPointsDialog.Tpo" "$(DEPDIR)/wxPlayer-EditLoopPointsDialog.Plo"; \
	else rm -f "$(DEPDIR)/wxPlayer-EditLoopPointsDialog.Tpo"; exit 1; \
	fi
#	source='EditLoopPointsDialog.cpp' object='wxPlayer-EditLoopPointsDialog.lo' libtool=yes \
#	depfile='$(DEPDIR)/wxPlayer-EditLoopPointsDialog.Plo' tmpdepfile='$(DEPDIR)/wxPlayer-EditLoopPointsDialog.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -c -o wxPlayer-EditLoopPointsDialog.lo `test -f 'EditLoopPointsDialog.cpp' || echo '$(srcdir)/'`EditLoopPointsDialog.cpp

wxPlayer-NewDeviceDialog.o: NewDeviceDialog.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -MT wxPlayer-NewDeviceDialog.o -MD -MP -MF "$(DEPDIR)/wxPlayer-NewDeviceDialog.Tpo" \
	  -c -o wxPlayer-NewDeviceDialog.o `test -f 'NewDeviceDialog.cpp' || echo '$(srcdir)/'`NewDeviceDialog.cpp; \
	then mv "$(DEPDIR)/wxPlayer-NewDeviceDialog.Tpo" "$(DEPDIR)/wxPlayer-NewDeviceDialog.Po"; \
	else rm -f "$(DEPDIR)/wxPlayer-NewDeviceDialog.Tpo"; exit 1; \
	fi
#	source='NewDeviceDialog.cpp' object='wxPlayer-NewDeviceDialog.o' libtool=no \
#	depfile='$(DEPDIR)/wxPlayer-NewDeviceDialog.Po' tmpdepfile='$(DEPDIR)/wxPlayer-NewDeviceDialog.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -c -o wxPlayer-NewDeviceDialog.o `test -f 'NewDeviceDialog.cpp' || echo '$(srcdir)/'`NewDeviceDialog.cpp

wxPlayer-NewDeviceDialog.obj: NewDeviceDialog.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -MT wxPlayer-NewDeviceDialog.obj -MD -MP -MF "$(DEPDIR)/wxPlayer-NewDeviceDialog.Tpo" \
	  -c -o wxPlayer-NewDeviceDialog.obj `if test -f 'NewDeviceDialog.cpp'; then $(CYGPATH_W) 'NewDeviceDialog.cpp'; else $(CYGPATH_W) '$(srcdir)/NewDeviceDialog.cpp'; fi`; \
	then mv "$(DEPDIR)/wxPlayer-NewDeviceDialog.Tpo" "$(DEPDIR)/wxPlayer-NewDeviceDialog.Po"; \
	else rm -f "$(DEPDIR)/wxPlayer-NewDeviceDialog.Tpo"; exit 1; \
	fi
#	source='NewDeviceDialog.cpp' object='wxPlayer-NewDeviceDialog.obj' libtool=no \
#	depfile='$(DEPDIR)/wxPlayer-NewDeviceDialog.Po' tmpdepfile='$(DEPDIR)/wxPlayer-NewDeviceDialog.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -c -o wxPlayer-NewDeviceDialog.obj `if test -f 'NewDeviceDialog.cpp'; then $(CYGPATH_W) 'NewDeviceDialog.cpp'; else $(CYGPATH_W) '$(srcdir)/NewDeviceDialog.cpp'; fi`

wxPlayer-NewDeviceDialog.lo: NewDeviceDialog.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -MT wxPlayer-NewDeviceDialog.lo -MD -MP -MF "$(DEPDIR)/wxPlayer-NewDeviceDialog.Tpo" \
	  -c -o wxPlayer-NewDeviceDialog.lo `test -f 'NewDeviceDialog.cpp' || echo '$(srcdir)/'`NewDeviceDialog.cpp; \
	then mv "$(DEPDIR)/wxPlayer-NewDeviceDialog.Tpo" "$(DEPDIR)/wxPlayer-NewDeviceDialog.Plo"; \
	else rm -f "$(DEPDIR)/wxPlayer-NewDeviceDialog.Tpo"; exit 1; \
	fi
#	source='NewDeviceDialog.cpp' object='wxPlayer-NewDeviceDialog.lo' libtool=yes \
#	depfile='$(DEPDIR)/wxPlayer-NewDeviceDialog.Plo' tmpdepfile='$(DEPDIR)/wxPlayer-NewDeviceDialog.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -c -o wxPlayer-NewDeviceDialog.lo `test -f 'NewDeviceDialog.cpp' || echo '$(srcdir)/'`NewDeviceDialog.cpp

wxPlayer-SoundEffectFrame.o: SoundEffectFrame.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -MT wxPlayer-SoundEffectFrame.o -MD -MP -MF "$(DEPDIR)/wxPlayer-SoundEffectFrame.Tpo" \
	  -c -o wxPlayer-SoundEffectFrame.o `test -f 'SoundEffectFrame.cpp' || echo '$(srcdir)/'`SoundEffectFrame.cpp; \
	then mv "$(DEPDIR)/wxPlayer-SoundEffectFrame.Tpo" "$(DEPDIR)/wxPlayer-SoundEffectFrame.Po"; \
	else rm -f "$(DEPDIR)/wxPlayer-SoundEffectFrame.Tpo"; exit 1; \
	fi
#	source='SoundEffectFrame.cpp' object='wxPlayer-SoundEffectFrame.o' libtool=no \
#	depfile='$(DEPDIR)/wxPlayer-SoundEffectFrame.Po' tmpdepfile='$(DEPDIR)/wxPlayer-SoundEffectFrame.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -c -o wxPlayer-SoundEffectFrame.o `test -f 'SoundEffectFrame.cpp' || echo '$(srcdir)/'`SoundEffectFrame.cpp

wxPlayer-SoundEffectFrame.obj: SoundEffectFrame.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -MT wxPlayer-SoundEffectFrame.obj -MD -MP -MF "$(DEPDIR)/wxPlayer-SoundEffectFrame.Tpo" \
	  -c -o wxPlayer-SoundEffectFrame.obj `if test -f 'SoundEffectFrame.cpp'; then $(CYGPATH_W) 'SoundEffectFrame.cpp'; else $(CYGPATH_W) '$(srcdir)/SoundEffectFrame.cpp'; fi`; \
	then mv "$(DEPDIR)/wxPlayer-SoundEffectFrame.Tpo" "$(DEPDIR)/wxPlayer-SoundEffectFrame.Po"; \
	else rm -f "$(DEPDIR)/wxPlayer-SoundEffectFrame.Tpo"; exit 1; \
	fi
#	source='SoundEffectFrame.cpp' object='wxPlayer-SoundEffectFrame.obj' libtool=no \
#	depfile='$(DEPDIR)/wxPlayer-SoundEffectFrame.Po' tmpdepfile='$(DEPDIR)/wxPlayer-SoundEffectFrame.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -c -o wxPlayer-SoundEffectFrame.obj `if test -f 'SoundEffectFrame.cpp'; then $(CYGPATH_W) 'SoundEffectFrame.cpp'; else $(CYGPATH_W) '$(srcdir)/SoundEffectFrame.cpp'; fi`

wxPlayer-SoundEffectFrame.lo: SoundEffectFrame.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -MT wxPlayer-SoundEffectFrame.lo -MD -MP -MF "$(DEPDIR)/wxPlayer-SoundEffectFrame.Tpo" \
	  -c -o wxPlayer-SoundEffectFrame.lo `test -f 'SoundEffectFrame.cpp' || echo '$(srcdir)/'`SoundEffectFrame.cpp; \
	then mv "$(DEPDIR)/wxPlayer-SoundEffectFrame.Tpo" "$(DEPDIR)/wxPlayer-SoundEffectFrame.Plo"; \
	else rm -f "$(DEPDIR)/wxPlayer-SoundEffectFrame.Tpo"; exit 1; \
	fi
#	source='SoundEffectFrame.cpp' object='wxPlayer-SoundEffectFrame.lo' libtool=yes \
#	depfile='$(DEPDIR)/wxPlayer-SoundEffectFrame.Plo' tmpdepfile='$(DEPDIR)/wxPlayer-SoundEffectFrame.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -c -o wxPlayer-SoundEffectFrame.lo `test -f 'SoundEffectFrame.cpp' || echo '$(srcdir)/'`SoundEffectFrame.cpp

wxPlayer-StreamFrame.o: StreamFrame.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -MT wxPlayer-StreamFrame.o -MD -MP -MF "$(DEPDIR)/wxPlayer-StreamFrame.Tpo" \
	  -c -o wxPlayer-StreamFrame.o `test -f 'StreamFrame.cpp' || echo '$(srcdir)/'`StreamFrame.cpp; \
	then mv "$(DEPDIR)/wxPlayer-StreamFrame.Tpo" "$(DEPDIR)/wxPlayer-StreamFrame.Po"; \
	else rm -f "$(DEPDIR)/wxPlayer-StreamFrame.Tpo"; exit 1; \
	fi
#	source='StreamFrame.cpp' object='wxPlayer-StreamFrame.o' libtool=no \
#	depfile='$(DEPDIR)/wxPlayer-StreamFrame.Po' tmpdepfile='$(DEPDIR)/wxPlayer-StreamFrame.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -c -o wxPlayer-StreamFrame.o `test -f 'StreamFrame.cpp' || echo '$(srcdir)/'`StreamFrame.cpp

wxPlayer-StreamFrame.obj: StreamFrame.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -MT wxPlayer-StreamFrame.obj -MD -MP -MF "$(DEPDIR)/wxPlayer-StreamFrame.Tpo" \
	  -c -o wxPlayer-StreamFrame.obj `if test -f 'StreamFrame.cpp'; then $(CYGPATH_W) 'StreamFrame.cpp'; else $(CYGPATH_W) '$(srcdir)/StreamFrame.cpp'; fi`; \
	then mv "$(DEPDIR)/wxPlayer-StreamFrame.Tpo" "$(DEPDIR)/wxPlayer-StreamFrame.Po"; \
	else rm -f "$(DEPDIR)/wxPlayer-StreamFrame.Tpo"; exit 1; \
	fi
#	source='StreamFrame.cpp' object='wxPlayer-StreamFrame.obj' libtool=no \
#	depfile='$(DEPDIR)/wxPlayer-StreamFrame.Po' tmpdepfile='$(DEPDIR)/wxPlayer-StreamFrame.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -c -o wxPlayer-StreamFrame.obj `if test -f 'StreamFrame.cpp'; then $(CYGPATH_W) 'StreamFrame.cpp'; else $(CYGPATH_W) '$(srcdir)/StreamFrame.cpp'; fi`

wxPlayer-StreamFrame.lo: StreamFrame.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -MT wxPlayer-StreamFrame.lo -MD -MP -MF "$(DEPDIR)/wxPlayer-StreamFrame.Tpo" \
	  -c -o wxPlayer-StreamFrame.lo `test -f 'StreamFrame.cpp' || echo '$(srcdir)/'`StreamFrame.cpp; \
	then mv "$(DEPDIR)/wxPlayer-StreamFrame.Tpo" "$(DEPDIR)/wxPlayer-StreamFrame.Plo"; \
	else rm -f "$(DEPDIR)/wxPlayer-StreamFrame.Tpo"; exit 1; \
	fi
#	source='StreamFrame.cpp' object='wxPlayer-StreamFrame.lo' libtool=yes \
#	depfile='$(DEPDIR)/wxPlayer-StreamFrame.Plo' tmpdepfile='$(DEPDIR)/wxPlayer-StreamFrame.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -c -o wxPlayer-StreamFrame.lo `test -f 'StreamFrame.cpp' || echo '$(srcdir)/'`StreamFrame.cpp

wxPlayer-wxPlayer.o: wxPlayer.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -MT wxPlayer-wxPlayer.o -MD -MP -MF "$(DEPDIR)/wxPlayer-wxPlayer.Tpo" \
	  -c -o wxPlayer-wxPlayer.o `test -f 'wxPlayer.cpp' || echo '$(srcdir)/'`wxPlayer.cpp; \
	then mv "$(DEPDIR)/wxPlayer-wxPlayer.Tpo" "$(DEPDIR)/wxPlayer-wxPlayer.Po"; \
	else rm -f "$(DEPDIR)/wxPlayer-wxPlayer.Tpo"; exit 1; \
	fi
#	source='wxPlayer.cpp' object='wxPlayer-wxPlayer.o' libtool=no \
#	depfile='$(DEPDIR)/wxPlayer-wxPlayer.Po' tmpdepfile='$(DEPDIR)/wxPlayer-wxPlayer.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -c -o wxPlayer-wxPlayer.o `test -f 'wxPlayer.cpp' || echo '$(srcdir)/'`wxPlayer.cpp

wxPlayer-wxPlayer.obj: wxPlayer.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -MT wxPlayer-wxPlayer.obj -MD -MP -MF "$(DEPDIR)/wxPlayer-wxPlayer.Tpo" \
	  -c -o wxPlayer-wxPlayer.obj `if test -f 'wxPlayer.cpp'; then $(CYGPATH_W) 'wxPlayer.cpp'; else $(CYGPATH_W) '$(srcdir)/wxPlayer.cpp'; fi`; \
	then mv "$(DEPDIR)/wxPlayer-wxPlayer.Tpo" "$(DEPDIR)/wxPlayer-wxPlayer.Po"; \
	else rm -f "$(DEPDIR)/wxPlayer-wxPlayer.Tpo"; exit 1; \
	fi
#	source='wxPlayer.cpp' object='wxPlayer-wxPlayer.obj' libtool=no \
#	depfile='$(DEPDIR)/wxPlayer-wxPlayer.Po' tmpdepfile='$(DEPDIR)/wxPlayer-wxPlayer.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -c -o wxPlayer-wxPlayer.obj `if test -f 'wxPlayer.cpp'; then $(CYGPATH_W) 'wxPlayer.cpp'; else $(CYGPATH_W) '$(srcdir)/wxPlayer.cpp'; fi`

wxPlayer-wxPlayer.lo: wxPlayer.cpp
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -MT wxPlayer-wxPlayer.lo -MD -MP -MF "$(DEPDIR)/wxPlayer-wxPlayer.Tpo" \
	  -c -o wxPlayer-wxPlayer.lo `test -f 'wxPlayer.cpp' || echo '$(srcdir)/'`wxPlayer.cpp; \
	then mv "$(DEPDIR)/wxPlayer-wxPlayer.Tpo" "$(DEPDIR)/wxPlayer-wxPlayer.Plo"; \
	else rm -f "$(DEPDIR)/wxPlayer-wxPlayer.Tpo"; exit 1; \
	fi
#	source='wxPlayer.cpp' object='wxPlayer-wxPlayer.lo' libtool=yes \
#	depfile='$(DEPDIR)/wxPlayer-wxPlayer.Plo' tmpdepfile='$(DEPDIR)/wxPlayer-wxPlayer.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wxPlayer_CXXFLAGS) $(CXXFLAGS) -c -o wxPlayer-wxPlayer.lo `test -f 'wxPlayer.cpp' || echo '$(srcdir)/'`wxPlayer.cpp

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool
uninstall-info-am:

ETAGS = etags
ETAGSFLAGS =

CTAGS = ctags
CTAGSFLAGS =

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$tags$$unique" \
	  || $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	     $$tags $$unique

ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)

top_distdir = ../..
distdir = $(top_distdir)/$(PACKAGE)-$(VERSION)

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkinstalldirs) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)

installdirs:
	$(mkinstalldirs) $(DESTDIR)$(bindir)

install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am

distclean: distclean-am

distclean-am: clean-am distclean-compile distclean-depend \
	distclean-generic distclean-libtool distclean-tags

dvi: dvi-am

dvi-am:

info: info-am

info-am:

install-data-am:

install-exec-am: install-binPROGRAMS

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am

maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS uninstall-info-am

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic clean-libtool ctags distclean distclean-compile \
	distclean-depend distclean-generic distclean-libtool \
	distclean-tags distdir dvi dvi-am info info-am install \
	install-am install-binPROGRAMS install-data install-data-am \
	install-exec install-exec-am install-info install-info-am \
	install-man install-strip installcheck installcheck-am \
	installdirs maintainer-clean maintainer-clean-generic \
	mostlyclean mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool pdf pdf-am ps ps-am tags uninstall \
	uninstall-am uninstall-binPROGRAMS uninstall-info-am

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
